# –ò–º–µ—é—Ç—Å—è 2  –≥—Ä—É–ø–ø—ã —É—á–µ–Ω–∏–∫–æ–≤, –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º, –Ω–æ —Å–¥–∞—é—â–∏—Ö  –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç–µ—Å—Ç. –ë–∞–ª–ª—ã, –Ω–∞–±—Ä–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ—Å—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ:
# –í—ã–±–æ—Ä–∫–∞ 1: 47, 75, 90 
# –í—ã–±–æ—Ä–∫–∞2: 58, 60, 77
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º —á—Ç–æ –Ω–µ—Ç  —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π  –º–µ–∂–¥—É –±–∞–ª–ª–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø.

# ùêª_0: ùúá_1= ùúá_2
# ùêª_1: ùúá_1‚â† ùúá_2

# ùúá_1 –∏  ùúá_2‚àí –º–µ–¥–∏–∞–Ω—ã 1-–π –∏ 2-–π –≤—ã–±–æ—Ä–æ–∫. 


# –ö—Ä–∏—Ç–µ—Ä–∏–π –ú–∞–Ω–Ω–∞- –£–∏—Ç–Ω–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∞–ª–æ–≥–æ–º –∫—Ä–∏—Ç–µ—Ä–∏—è –°—Ç—å—é–¥–µ–Ω—Ç–∞ t. –î–∞–Ω–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞–Ω–≥–∞—Ö.
# –£—Å–ª–æ–≤–∏—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:
# –ù–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è —É—Å–ª–æ–≤–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
# –î–∏—Å–ø–µ—Ä—Å–∏–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö —Ä–∞–∑–ª–∏—á–Ω—ã
# –ß–∏—Å–ª–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø —Ä–∞–≤–Ω–æ 2
# –í—ã–±–æ—Ä–∫–∏ —è–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏
# (–Ω–µ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –¥–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –≤—ã–±–æ—Ä–∫–∏)

# –¢–µ—Å—Ç –ú–∞–Ω–Ω–∞-–£–∏—Ç–Ω–∏
import numpy as np
import scipy.stats as stats

X_1 = np.array([47, 75, 90])
X_2 = np.array([58, 60, 77])

print(stats.mannwhitneyu(X_1, X_2)) # MannwhitneyuResult(statistic=5.0, pvalue=1.0)

#########################################################################################

# –ò—Å—Å–ª–µ–¥—É–µ—Ç—Å—è –≤–ª–∏—è–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –¥–∏–µ—Ç—ã –Ω–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.  –í –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —É—á–∞—Å—Ç–≤—É—é—Ç 10 –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤.

# –ö—Ä–∏—Ç–µ—Ä–∏–π –£–∏–ª–∫–æ–∫—Å–æ–Ω–∞ ‚Äì –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π, –∞–Ω–∞–ª–æ–≥ –∫—Ä–∏—Ç–µ—Ä–∏—è –°—Ç—å—é–¥–µ–Ω—Ç–∞ t, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∞–Ω–≥–∞—Ö. 
# –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –∑–∞–≤–∏—Å–∏–º—ã—Ö –≤—ã–±–æ—Ä–æ–∫

import numpy as np
import scipy.stats as stats

x1 = np.array([70, 74, 74.5, 79, 85, 93, 94, 98, 106.5, 107])
x2 = np.array([64, 76.5, 67, 73.5, 89, 85, 89.5, 91, 98, 100.5])

print(x2-x1) #[-6.   2.5 -7.5 -5.5  4.  -8.  -4.5 -7.  -8.5 -6.5]

print(stats.wilcoxon(x1, x2)) # WilcoxonResult(statistic=3.0, pvalue=0.009765625)
# –í—ã–≤–æ–¥: W = 1+2=3 (—Å—É–º–º–∞ —Ä–∞–Ω–≥–æ–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π). pvalue=0.009 < –∞–ª—å—Ñ–∞=0,05 => 
# —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –µ—Å—Ç—å => –¥–∏–µ—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤

# –ü–æ–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ x2

x3 = np.array([64, 76.5, 67, 73.5, 89, 85, 89.5, 91, 98, 113.5])

print(x3-x1) # [-6.   2.5 -7.5 -5.5  4.  -8.  -4.5 -7.  -8.5 6.5]

print(stats.wilcoxon(x1, x3)) # WilcoxonResult(statistic=9.0, pvalue=0.064453125)
# –í—ã–≤–æ–¥: W = 1+2+6=9 (—Å—É–º–º–∞ —Ä–∞–Ω–≥–æ–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π). pvalue=0.064 > –∞–ª—å—Ñ–∞=0,05 => 
# —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ—Ç => –¥–∏–µ—Ç–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤

##############################################################################

# –ö—Ä–∏—Ç–µ—Ä–∏–π –ö—Ä—É—Å–∫–∞–ª–∞ ‚Äì–£–æ–ª–ª–∏—Å–∞ ùêª‚Äì –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–ø–ø.
# –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π –ö—Ä—É—Å–∫–∞–ª–∞-–£–æ–ª–ª–∏—Å–∞ ùêª –¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:
# 1 –û–±–æ–±—â–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω —Ä—è–¥
# 2 –ü—Ä–∏—Å–≤–æ–∏–º —Ä–∞–Ω–≥–∏ –≤ —ç—Ç–æ–º —Ä—è–¥—É
# 3 –ü–æ—Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ä–∞–Ω–≥–æ–≤, –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã—Ö –≤ –æ–±—â–µ–º —Ä—è–¥—É, –Ω–æ —Ç–µ–ø–µ—Ä—å —É–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö. –¢.–µ. –ø–æ–ª—É—á–∏–º —Å—É–º–º—É —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã.
# 4 –í–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —Ñ–æ—Ä–º—É–ª–æ–π:
# ùêª=  12/(ùëÅ‚àó(ùëÅ+1) )‚àó‚àë1_(ùëñ=1)^(ùëò_ùëó)‚ñí„Äñùëá_ùëó„Äó^2/ùëõ_ùëó ‚àí3(ùëÅ+1), 
# –≥–¥–µ N ‚Äì –æ–±—â–µ–µ —á–∏—Å–ª–æ  –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö,
# ùëò_ùëó- –æ–±—ä–µ–º j-–æ–π –≤—ã–±–æ—Ä–∫–∏ 
# ùëá_ùëó- —Å—É–º–º–∞ —Ä–∞–Ω–≥–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ.

# –î–∞–Ω—ã –∑–∞—Ä–∞–±–æ—Ç–Ω—ã–µ –ø–ª–∞—Ç—ã –ª—é–¥–µ–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∫ —Ç—Ä–µ–º —Ä–∞–∑–Ω—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º (—É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è).
#   gr 1: 70, 50, 64, 61, 75, 67, 73
# 	gr 2: 80, 78, 90, 68, 74, 65, 85
# 	gr 3: 141, 142, 140, 152, 161, 163, 155
#   –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–ª–∏—è–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É.

import numpy as np
import scipy.stats as stats

gr1 = np.array([70, 50, 64, 61, 75, 67, 73])
gr2 = np.array([80, 78, 90, 68, 74, 65, 85])
gr3 = np.array([141, 142, 140, 152, 161, 163, 155])

print(stats.kruskal(gr1, gr2, gr3)) #KruskalResult(statistic=15.384044526901675, pvalue=0.00045645416718036815)

# –í—ã–≤–æ–¥: pvalue=0.00045 < –∞–ª—å—Ñ–∞=0.05 => –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è =>
# –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É

######################################################################################

# –ö—Ä–∏—Ç–µ—Ä–∏–π –§—Ä–∏–¥–º–∞–Ω–∞
# –ö–æ–≥–¥–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç –±–æ–ª–µ–µ –¥–≤—É—Ö –≤—ã–±–æ—Ä–æ–∫  –∏  —ç—Ç–æ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω—è–µ–º 
# –∫—Ä–∏—Ç–µ—Ä–∏–π –§—Ä–∏–¥–º–∞–Ω–∞ ‚Äì–Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç.  
# (–ù–µ —Å–æ–±–ª—é–¥–∞—é—Ç—Å—è  —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–π –≤ –∏—Å—Å–ª–µ–¥—É–µ–º—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö)

# –£ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑–º–µ—Ä–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞ –¥–æ –¥–∏–µ—Ç—ã, –ø–æ—Å–ª–µ –¥–∏–µ—Ç—ã a –∏ –ø–æ—Å–ª–µ –¥–∏–µ—Ç—ã b
# –í–ª–∏—è—é—Ç –ª–∏ –¥–∏–µ—Ç—ã –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞

import numpy as np
import scipy.stats as stats

before = np.array([123, 135, 119, 109, 145])
diet_1 = np.array([126, 144, 117, 156, 170])
diet_2 = np.array([141, 150, 164, 147, 169])

print(stats.friedmanchisquare(before, diet_1, diet_2)) 
# FriedmanchisquareResult(statistic=5.200000000000003, pvalue=0.0742735782143338)

# –í—ã–≤–æ–¥: pvalue=0.074 > –∞–ª—å—Ñ–∞=0.05 => –≤–µ—Ä–Ω–∞ –Ω—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞
# –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ –∞–ª—å—Ñ–∞=0.05
# –¥–∏–µ—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≥–µ–º–æ–≥–ª–æ–±–∏–Ω–∞

###########################################################################################

# 5. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –≤—Ä–∞—á–∏ –¥–µ–ª–∞—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è. –°—á–∏—Ç–∞–ª–∞—Å—å —Å—É–º–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤. –ü–æ—Ç–æ–º –≤—Ä–∞—á –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —Å—É–º–º–∞–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤,
# –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–ª–µ–≥–∞–º–∏. –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ–≥–æ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–ª–ª–µ–≥. 
# –£—Å–ª–æ–≤–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è.
# –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ–≥–æ –¥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–ª–ª–µ–≥
# X= np.array([20,17, 14, 42, 50, 62, 8, 49, 81, 54, 48, 55, 56])
# Y= np.array ([20, 26, 1, 24, 1, 47, 15, 7, 65, 9, 21, 36, 30])
# –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ–≥–æ –¥–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–ª–ª–µ–≥
# X= np.array([ 32, 41, 51, 29, 76, 47, 60, 58, 40, 64, 73, 66, 73])
# Y= np.array ([42, 90, 71, 47, 56, 43, 137, 63, 28, 60, 87, 69, 50])
# –ü—Ä–æ–∏–∑–æ—à–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ª–µ—á–µ–Ω–∏–µ?

import numpy as np
import scipy.stats as stats

X = np.array([20, 17, 14, 42, 50, 62, 8, 49, 81, 54, 48, 55, 56])
Y = np.array ([20, 26, 1, 24, 1, 47, 15, 7, 65, 9, 21, 36, 30])

print(stats.wilcoxon(X, Y)) # WilcoxonResult(statistic=3.0, pvalue=0.004741768038406971)
# pvalue=0.004 < alfa=0,05 => –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ–≥–æ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–ª–ª–µ–≥ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å

X = np.array([32, 41, 51, 29, 76, 47, 60, 58, 40, 64, 73, 66, 73])
Y = np.array ([42, 90, 71, 47, 56, 43, 137, 63, 28, 60, 87, 69, 50])

print(stats.wilcoxon(X, Y)) # WilcoxonResult(statistic=31.5, pvalue=0.339599609375)
# pvalue=0.339 > alfa=0,05 => –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å–Ω–æ–≥–æ –¥–æ –∏ –ø–æ—Å–ª–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∫–æ–ª–ª–µ–≥ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å

############################################################################################

# –ü—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫—Ä–æ–≤—è–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è —É –±–æ–ª—å–Ω—ã—Ö 3 —Ä–∞–∑–∞ –∏–∑–º–µ—Ä—è–ª—Å—è —Å–µ—Ä–¥–µ—á–Ω—ã–π –≤—ã–±—Ä–æ—Å. 
# –ú–µ–Ω—è–ª—Å—è –ª–∏ —Å–µ—Ä–¥–µ—á–Ω—ã–π –≤—ã–±—Ä–æ—Å?
# –ù–∞–π—Ç–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º p-value
#     A= np.array([3.5, 3.3, 4.9, 3.6])
#     B= np.array([8.6, 5.4, 8.8, 5.6])
#     C=np.array([5.1, 8.6, 7.7, 5.0])

A = np.array([3.5, 3.3, 4.9, 3.6])
B = np.array([8.6, 5.4, 8.8, 5.6])
C = np.array([5.1, 8.6, 7.7, 5.0])

print(stats.friedmanchisquare(A, B, C)) # FriedmanchisquareResult(statistic=6.5, pvalue=0.03877420783172202)
# pvalue=0.038 < alfa=0,05 => —Å–µ—Ä–¥–µ—á–Ω—ã–π –≤—ã–±—Ä–æ—Å –º–µ–Ω—è–ª—Å—è

#########################################################################################

# –î–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Å—É–¥–æ–≤ —Å–µ—Ç—á–∞—Ç–∫–∏ gr1 (–∑–¥–æ—Ä–æ–≤—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã), gr 2 ( –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π 
# —è–º–∫–∏), gr3 (–≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —è–º–∫–∏ –∏ –Ω–∞ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏).
# –°—Ä–∞–≤–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Ä–∞–∑–Ω—ã–º –≤–∏–¥–∞–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è.
# gr1 =([0.5, 0.7, 1, 1.2, 1.4])
# gr2 = ([1.3, 1.45, 1.6, 1.7, 1.8])
# gr3 = ([6.2, 12.6, 13.2, 14.1, 14.2])

gr1 = np.array([0.5, 0.7, 1, 1.2, 1.4])
gr2 = np.array([1.3, 1.45, 1.6, 1.7, 1.8])
gr3 = np.array([6.2, 12.6, 13.2, 14.1, 14.2])

print(stats.kruskal(gr1, gr2, gr3)) # KruskalResult(statistic=12.02000000000001, pvalue=0.002454088180413905)
# pvalue=0.002 < alfa=0,05 => –æ—Ç–≤–µ—Ä–≥–∞–µ–º 0-—é –≥–∏–ø–æ—Ç–µ–∑—É, –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è









